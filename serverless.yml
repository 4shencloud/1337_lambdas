service: task-processor

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs22.x
  region: eu-central-1
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
  environment:
    TASK_QUEUE_URL:
      Ref: TaskQueue
    TASK_RETRY_TABLE: TaskRetryTable

plugins:
  - serverless-offline

functions:
  submitTask:
    handler: handler.submitTask
    events:
      - http:
          path: submit
          method: post
          cors: true

  processTask:
    handler: handler.processTask
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ TaskQueue, Arn ]
          batchSize: 1

  monitorDLQ:
    handler: handler.monitorDLQ
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ DeadLetterQueue, Arn ]
          batchSize: 1

resources:
  Resources:
    TaskQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: task-queue
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [ DeadLetterQueue, Arn ]
          maxReceiveCount: 1

    TaskRetryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TaskRetryTable
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: dead-letter-queue
    
    DLQMessageAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: DLQMessageVisibleAlarm
        AlarmDescription: "Triggered when messages are visible in DLQ"
        Namespace: AWS/SQS
        MetricName: ApproximateNumberOfMessagesVisible
        Dimensions:
          - Name: QueueName
            Value: dead-letter-queue
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching
        ActionsEnabled: false  # can send email here
      
  Outputs:
    TaskQueueUrl:
      Value:
        Ref: TaskQueue
      Export:
        Name: TaskQueueUrl

    TaskRetryTableName:
      Value: TaskRetryTable
      Export:
        Name: TaskRetryTableName

    DeadLetterQueueUrl:
      Value:
        Ref: DeadLetterQueue
      Export:
        Name: DeadLetterQueueUrl